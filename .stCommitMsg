feat: <description>

# Add a more detailed explanation of the changes in the body of the commit message.
# Separate the subject from the body with a blank line.

# Explain the motivation for the change and contrast this with previous behavior.

# Use the imperative, present tense: "change" not "changed" nor "changes".
# Don't capitalize the first letter.
# No dot (.) at the end.

# --- COMMIT TYPES ---
# feat:     A new feature
# fix:      A bug fix
# docs:     Documentation only changes
# style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
# refactor: A code change that neither fixes a bug nor adds a feature
# perf:     A code change that improves performance
# test:     Adding missing tests or correcting existing tests
# build:    Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
# ci:       Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
# chore:    Other changes that don't modify src or test files
# revert:   Reverts a previous commit

# --- OPTIONAL SCOPE ---
# The scope should be the name of the npm package affected (as perceived by the person reading the changelog generated from the commit messages).
# Example: feat(parser): add ability to parse arrays

# --- BREAKING CHANGES ---
# A commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change.
# A BREAKING CHANGE can be part of commits of any type.
# Example:
# feat!: send an email to the customer when a product is shipped
# BREAKING CHANGE: The `send` method now requires a `customer` parameter.

# --- FOOTERS ---
# Footers should contain information about Breaking Changes and reference issues that this commit closes.
# Example:
# Fixes #13
# Closes #234